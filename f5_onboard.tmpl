#!/bin/bash

# Script must be non-blocking or run in the background.

mkdir -p /config/cloud

cat << 'EOF' > /config/cloud/startup-script.sh

#!/bin/bash

# BIG-IPS ONBOARD SCRIPT

LOG_FILE=${onboard_log}

if [ ! -e $LOG_FILE ]
then
     touch $LOG_FILE
     exec &>>$LOG_FILE
else
    #if file exists, exit as only want to run once
    exit
fi

exec 1>$LOG_FILE 2>&1

# CHECK TO SEE NETWORK IS READY
CNT=0
while true
do
  STATUS=$(curl -s -k -I example.com | grep HTTP)
  if [[ $STATUS == *"200"* ]]; then
    echo "Got 200! VE is Ready!"
    break
  elif [ $CNT -le 6 ]; then
    echo "Status code: $STATUS  Not done yet..."
    CNT=$[$CNT+1]
  else
    echo "GIVE UP..."
    break
  fi
  sleep 10
done

mkdir -p ${libs_dir}
### DOWNLOAD ONBOARDING LIBS
# Could be pre-packaged or hosted internally
curl -o /config/cloud/f5-cloud-libs-aws.tar.gz --silent --fail --retry 60 -L https://github.com/F5Networks/f5-cloud-libs-aws/archive/v2.4.0.tar.gz
curl -o /config/cloud/f5-cloud-libs.tar.gz --silent --fail --retry 60 -L https://github.com/F5Networks/f5-cloud-libs/archive/v4.8.1.tar.gz
tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C ${libs_dir}/
mv ${libs_dir}/f5-cloud-libs-* ${libs_dir}/f5-cloud-libs
mkdir ${libs_dir}/f5-cloud-libs/node_modules
tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C ${libs_dir}/f5-cloud-libs/node_modules

### BEGIN BASIC ONBOARDING 
# WAIT FOR MCPD (DATABASE) TO BE UP TO BEGIN F5 CONFIG
. ${libs_dir}/f5-cloud-libs/scripts/util.sh
wait_for_bigip

# CHECK TO SEE NETWORK IS READY AGAIN - github.com was not resolvable sometimes at this stage
CNT=0
while true
do
  STATUS=$(curl -s -k -I example.com | grep HTTP)
  if [[ $STATUS == *"200"* ]]; then
    echo "Got 200! VE is Ready!"
    break
  elif [ $CNT -le 10 ]; then
    echo "Status code: $STATUS  Not done yet..."
    CNT=$[$CNT+1]
  else
    echo "GIVE UP..."
    break
  fi
  sleep 10
done

### SET ADMIN PASSWORD
tmsh modify auth user admin password ${PWD}

### DOWNLOAD ONBOARDING PKGS
# Could be pre-packaged or hosted internally

DO_URL='${DO_URL}'
DO_FN=$(basename "$DO_URL")
AS3_URL='${AS3_URL}'
AS3_FN=$(basename "$AS3_URL")



echo -e "\n"$(date) "Download Declarative Onboarding Pkg"
curl -L -o ${libs_dir}/$DO_FN $DO_URL

echo -e "\n"$(date) "Download AS3 Pkg"
curl -L -o ${libs_dir}/$AS3_FN $AS3_URL
sleep 20

# Copy the RPM Pkg to the file location
cp ${libs_dir}/*.rpm /var/config/rest/downloads/

# Install Declarative Onboarding Pkg
DATA="{\"operation\":\"INSTALL\",\"packageFilePath\":\"/var/config/rest/downloads/$DO_FN\"}"
echo -e "\n"$(date) "Install DO Pkg"
restcurl -X POST "shared/iapp/package-management-tasks" -d $DATA

# Install AS3 Pkg
DATA="{\"operation\":\"INSTALL\",\"packageFilePath\":\"/var/config/rest/downloads/$AS3_FN\"}"
echo -e "\n"$(date) "Install AS3 Pkg"
restcurl -X POST "shared/iapp/package-management-tasks" -d $DATA

### Sleeping for 3 minutes to make sure DO Pkg has been installed
sleep 3m

# Install DO Configuration
echo -e "\n"$(date) "Installing DO Configuration File"
restcurl -u admin:F5Twister! -X POST https://localhost/mgmt/shared/declarative-onboarding -d '{
    "schemaVersion": "1.0.0",
    "class": "Device",
    "async": true,
    "label": "my BIG-IP declaration for declarative onboarding",
    "Common": {
        "class": "Tenant",
        "mySystem": {
            "class": "System",
            "hostname": "bigip.example.com",
            "cliInactivityTimeout": 0,
            "consoleInactivityTimeout": 0,
            "autoPhonehome": false
        },
        "myDns": {
            "class": "DNS",
            "nameServers": [
                "8.8.8.8",
                "2001:4860:4860::8844"
            ],
            "search": [
                "f5.com"
            ]
        },
        "myNtp": {
            "class": "NTP",
            "servers": [
                "0.pool.ntp.org",
                "1.pool.ntp.org",
                "2.pool.ntp.org"
            ],
            "timezone": "UTC"
        },    
        "myProvisioning": {
            "class": "Provision",
            "ltm": "nominal",
            "asm": "nominal"
        },
        "internal": {
            "class": "VLAN",
            "tag": 4093,
            "mtu": 1500,
            "interfaces": [
                {
                    "name": "1.2",
                    "tagged": false
                }
            ],
            "cmpHash": "dst-ip"
        },
        "internal-self": {
            "class": "SelfIp",
            "address": "10.0.4.150/24",
            "vlan": "internal",
            "allowService": "default",
            "trafficGroup": "traffic-group-local-only"
        },
        "external": {
            "class": "VLAN",
            "tag": 4094,
            "mtu": 1500,
            "interfaces": [
                {
                    "name": "1.1",
                    "tagged": false
                }
            ],
            "cmpHash": "src-ip"
        },
        "external-self": {
            "class": "SelfIp",
            "address": "10.0.3.150/24",
            "vlan": "external",
            "allowService": "default",
            "trafficGroup": "traffic-group-local-only"
        }
        
    }
}'

### Sleeping for 5 minutes so ASM can provision, then we run the AS3 declaration.
sleep 5m 

# Install AS3 Configuration
echo -e "\n"$(date) "Installing AS3 Configuration File"
restcurl -u admin:F5Twister! -X POST https://localhost/mgmt/shared/appsvcs/declare -d '{
    "class": "ADC",
    "schemaVersion": "3.2.0",
    "id": "5489432",
    "label": "ASM_policy_external_URL",
    "remark": "ASM_policy_external_URL",
    "awaf_ngfw_demo": {
      "class": "Tenant",
      "HTTP_Service": {
        "class": "Application",
        "template": "http",
        "serviceMain": {
          "class": "Service_HTTP",
          "virtualAddresses": [
            "10.0.3.150"
          ],
          "snat": "auto",
          "pool": "Web",
          "securityLogProfiles": [
                    {
                       "bigip": "/Common/Log all requests"
                    }
                    ],
          "policyWAF": {
            "use": "Demo_ASM_Policy"
          }
        },
        "Web": {
          "class": "Pool",
          "monitors": [
            "http"
          ],
          "members": [
            {
              "servicePort": 80,
              "serverAddresses": [
                "10.0.4.50"
              ]
            }
        ]
        },
        "Demo_ASM_Policy": {
          "class": "WAF_Policy",
          "url": "https://raw.githubusercontent.com/therealnoof/terraform-aws-awaf-ngfw-demo/master/waftemplate.xml",
          "ignoreChanges": true
        }
      }
    }
  }'

date
echo "FINISHED STARTUP SCRIPT"

### Clean up
rm /config/cloud/startup-script.sh 
EOF


# Now run in the background to not block startup
chmod 755 /config/cloud/startup-script.sh 
nohup /config/cloud/startup-script.sh &
